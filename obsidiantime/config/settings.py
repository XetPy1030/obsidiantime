"""
Django settings for obsidiantime project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-4rzfxs$hg=lrgwt*p92bs#zdfa7lk19ky9uccwftw&ckl4f(pg"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else ["*"]
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "crispy_forms",
    "crispy_bootstrap4",
    "tinymce",
    "django_filters",
    "storages",
    # Local apps
    "obsidiantime.main",
    "obsidiantime.chat",
    "obsidiantime.gallery",
    "obsidiantime.seo",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "obsidiantime.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "obsidiantime.main.context_processors.social_links",
                "obsidiantime.seo.context_processors.seo_context",
            ],
        },
    },
]

WSGI_APPLICATION = "obsidiantime.config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "obsidiantime"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "postgres"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ru-ru"

TIME_ZONE = "Europe/Moscow"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (local development)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Storage settings for local development
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Crispy forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Login/Logout URLs
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# TinyMCE settings
TINYMCE_DEFAULT_CONFIG = {
    "theme": "silver",
    "height": 300,
    "menubar": False,
    "plugins": "advlist,autolink,lists,link,image,charmap,print,preview,anchor,"
    "searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,paste,"
    "code,help,wordcount",
    "toolbar": "undo redo | formatselect | bold italic backcolor | "
    "alignleft aligncenter alignright alignjustify | "
    "bullist numlist outdent indent | removeformat | help",
}

# AWS S3 Configuration for media files
USE_S3 = os.getenv("USE_S3", "false").lower() == "true"

if USE_S3:
    # AWS S3 settings
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "us-east-1")

    # Support for MinIO and other S3-compatible services
    AWS_S3_ENDPOINT_URL = os.getenv("AWS_S3_ENDPOINT_URL", None)
    if AWS_S3_ENDPOINT_URL:
        AWS_S3_CUSTOM_DOMAIN = AWS_S3_ENDPOINT_URL.replace("http://", "").replace(
            "https://", ""
        )
    else:
        AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

    # S3 settings
    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_S3_FILE_OVERWRITE = False
    AWS_QUERYSTRING_AUTH = False

    STORAGES = {
        "default": {
            "BACKEND": "obsidiantime.config.storage_backends.MediaStorage",
        },
        "staticfiles": {
            "BACKEND": "obsidiantime.config.storage_backends.StaticStorage",
        },
    }
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    AWS_S3_SIGNATURE_VERSION = "s3v4"
    AWS_S3_ADDRESSING_STYLE = "path"

# SEO настройки
SEO_SETTINGS = {
    "DEFAULT_SITE_NAME": "ObsidianTime",
    "DEFAULT_SITE_DESCRIPTION": "Место для мемов, общения и веселья!",
    "DEFAULT_SITE_KEYWORDS": "мемы, чат, цитаты, общение, веселье, развлечения",
    "DEFAULT_AUTHOR": "ObsidianTime Team",
    "DEFAULT_LANGUAGE": "ru",
    "DEFAULT_LOCALE": "ru_RU",
    "DEFAULT_TIMEZONE": "Europe/Moscow",
    "DEFAULT_CURRENCY": "RUB",
    "DEFAULT_COUNTRY": "RU",
}

# Sitemap настройки
SITEMAP_SETTINGS = {
    "ENABLE_SITEMAP": True,
    "SITEMAP_URL": "/sitemap.xml",
    "ROBOTS_URL": "/robots.txt",
    "SITEMAP_PRIORITY": {
        "home": 1.0,
        "gallery": 0.8,
        "quotes": 0.8,
        "chat": 0.6,
        "about": 0.5,
    },
    "SITEMAP_CHANGEFREQ": {
        "home": "daily",
        "gallery": "weekly",
        "quotes": "weekly",
        "chat": "daily",
        "about": "monthly",
    },
}

# Open Graph настройки
OPENGRAPH_SETTINGS = {
    "DEFAULT_IMAGE": "/static/images/obsidian-logo.svg",
    "DEFAULT_TYPE": "website",
    "DEFAULT_LOCALE": "ru_RU",
}

# Twitter Card настройки
TWITTER_CARD_SETTINGS = {
    "DEFAULT_CARD_TYPE": "summary_large_image",
    "DEFAULT_CREATOR": "@obsidiantime",
    "DEFAULT_SITE": "@obsidiantime",
}

# Schema.org микроразметка настройки
SCHEMA_SETTINGS = {
    "ENABLE_SCHEMA": True,
    "DEFAULT_ORGANIZATION": {
        "name": "ObsidianTime",
        "url": "https://obsidiantime.ru",
        "logo": "https://obsidiantime.ru/static/images/obsidian-logo.svg",
        "description": "Место для мемов, общения и веселья!",
    },
    "DEFAULT_WEBSITE": {
        "name": "ObsidianTime",
        "url": "https://obsidiantime.ru",
        "description": "Место для мемов, общения и веселья!",
        "inLanguage": "ru-RU",
    },
}

# Meta теги по умолчанию
DEFAULT_META_TAGS = {
    "viewport": "width=device-width, initial-scale=1.0",
    "robots": "index, follow",
    "author": "ObsidianTime Team",
    "language": "ru",
    "revisit-after": "7 days",
    "distribution": "global",
    "rating": "general",
    "theme-color": "#0d6efd",
    "msapplication-TileColor": "#0d6efd",
    "apple-mobile-web-app-capable": "yes",
    "apple-mobile-web-app-status-bar-style": "default",
    "apple-mobile-web-app-title": "ObsidianTime",
    "application-name": "ObsidianTime",
    "msapplication-config": "/static/browserconfig.xml",
}

# Canonical URL настройки
CANONICAL_SETTINGS = {
    "ENABLE_CANONICAL": True,
    "DEFAULT_DOMAIN": "https://obsidiantime.ru",
    "FORCE_HTTPS": True,
    "REMOVE_WWW": True,
}

# Структурированные данные (JSON-LD)
STRUCTURED_DATA = {
    "ENABLE_STRUCTURED_DATA": True,
    "DEFAULT_CONTEXT": "https://schema.org",
    "DEFAULT_TYPE": "WebSite",
    "DEFAULT_POTENTIAL_ACTION": {
        "type": "SearchAction",
        "target": "https://obsidiantime.ru/search?q={search_term_string}",
        "query-input": "required name=search_term_string",
    },
}

# Аналитика и веб-мастера
ANALYTICS_SETTINGS = {
    "GOOGLE_ANALYTICS_ID": os.getenv("GOOGLE_ANALYTICS_ID", ""),
    "YANDEX_METRIKA_ID": os.getenv("YANDEX_METRIKA_ID", ""),
    "GOOGLE_SEARCH_CONSOLE": os.getenv("GOOGLE_SEARCH_CONSOLE", ""),
    "YANDEX_WEBMASTER": os.getenv("YANDEX_WEBMASTER", ""),
}

# Социальные сети
SOCIAL_MEDIA_SETTINGS = {
    "FACEBOOK_APP_ID": os.getenv("FACEBOOK_APP_ID", ""),
    "TWITTER_CREATOR": "@obsidiantime",
    "TWITTER_SITE": "@obsidiantime",
    "VK_GROUP_ID": os.getenv("VK_GROUP_ID", ""),
    "TELEGRAM_CHANNEL": os.getenv("TELEGRAM_CHANNEL", ""),
}

# Кеширование для SEO
SEO_CACHE_SETTINGS = {
    "ENABLE_CACHE": True,
    "CACHE_TIMEOUT": 3600,  # 1 час
    "SITEMAP_CACHE_TIMEOUT": 86400,  # 24 часа
    "ROBOTS_CACHE_TIMEOUT": 86400,  # 24 часа
}

# Настройки для поисковых роботов
ROBOTS_SETTINGS = {
    "USER_AGENT": "*",
    "DISALLOW": [
        "/admin/",
        "/auth/",
        "/api/",
        "/private/",
        "/temp/",
        "/cache/",
        "/logs/",
    ],
    "ALLOW": [
        "/",
        "/gallery/",
        "/quotes/",
        "/chat/",
        "/about/",
        "/static/",
        "/media/",
    ],
    "SITEMAP": "/sitemap.xml",
    "CRAWL_DELAY": 1,
}

# Настройки для производительности (Core Web Vitals)
PERFORMANCE_SETTINGS = {
    "ENABLE_COMPRESSION": True,
    "ENABLE_MINIFICATION": True,
    "ENABLE_LAZY_LOADING": True,
    "ENABLE_PRELOAD": True,
    "ENABLE_PREFETCH": True,
    "ENABLE_DNS_PREFETCH": True,
    "ENABLE_CRITICAL_CSS": True,
    "ENABLE_IMAGE_OPTIMIZATION": True,
    "ENABLE_WEBP_SUPPORT": True,
    "ENABLE_AVIF_SUPPORT": False,  # Пока отключено для совместимости
}

# Настройки безопасности для SEO
SEO_SECURITY_SETTINGS = {
    "ENABLE_HSTS": True,
    "ENABLE_CSP": True,
    "ENABLE_XSS_PROTECTION": True,
    "ENABLE_CONTENT_TYPE_NOSNIFF": True,
    "ENABLE_FRAME_OPTIONS": True,
    "ENABLE_REFERRER_POLICY": True,
    "ENABLE_PERMISSIONS_POLICY": True,
}

# Настройки для мобильной оптимизации
MOBILE_OPTIMIZATION = {
    "ENABLE_AMP": False,  # Можно включить позже
    "ENABLE_PWA": True,
    "ENABLE_APP_MANIFEST": True,
    "ENABLE_SERVICE_WORKER": True,
    "ENABLE_OFFLINE_SUPPORT": True,
}

# Настройки для интернационализации
I18N_SEO_SETTINGS = {
    "DEFAULT_LANGUAGE": "ru",
    "SUPPORTED_LANGUAGES": ["ru", "en"],
    "LANGUAGE_DOMAINS": {
        "ru": "obsidiantime.ru",
        "en": "en.obsidiantime.ru",
    },
    "HREFLANG_ENABLED": True,
    "TRANSLATION_ENABLED": False,  # Можно включить позже
}

# Django Sites Framework
SITE_ID = 1

# CSRF настройки
CSRF_TRUSTED_ORIGINS = [
    "https://obsidiantime.ru",
    "https://www.obsidiantime.ru",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Настройки безопасности
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_HSTS_SECONDS = 31536000  # 1 год
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Настройки сессий
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True

# Настройки для продакшена
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Настройки логирования
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Настройки кеширования
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    }
}

# Настройки для файлов
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Настройки для медиа файлов
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_IMAGE_TYPES = ["image/jpeg", "image/png", "image/gif", "image/webp"]
ALLOWED_VIDEO_TYPES = ["video/mp4", "video/webm", "video/ogg"]

# Настройки для сообщений
MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

# Настройки для Rate Limiting
# RATELIMIT_ENABLE = True
# RATELIMIT_USE_CACHE = 'default'

# Настройки для мониторинга
ENABLE_MONITORING = os.getenv("ENABLE_MONITORING", "false").lower() == "true"

if ENABLE_MONITORING:
    INSTALLED_APPS += [
        "django_prometheus",
    ]
    MIDDLEWARE = [
        "django_prometheus.middleware.PrometheusBeforeMiddleware",
        *MIDDLEWARE,
        "django_prometheus.middleware.PrometheusAfterMiddleware",
    ]
