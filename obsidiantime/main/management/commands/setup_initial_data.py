from django.contrib.auth.models import User
from django.core.management.base import BaseCommand

from obsidiantime.chat.models import Message
from obsidiantime.main.models import Quote, SiteSettings, SocialLink


class Command(BaseCommand):
    help = "Setup initial data for ObsidianTime"

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("Setting up initial data..."))

        # Create superuser if it doesn't exist
        if not User.objects.filter(username="admin").exists():
            admin = User.objects.create_superuser(
                username="admin",
                email="admin@obsidiantime.ru",
                password="admin123",
                first_name="–ê–¥–º–∏–Ω",
                last_name="ObsidianTime",
            )
            self.stdout.write(
                self.style.SUCCESS(f"Created superuser: {admin.username}")
            )

        # Create demo user
        if not User.objects.filter(username="demo").exists():
            demo_user = User.objects.create_user(
                username="demo",
                email="demo@obsidiantime.ru",
                password="demo123",
                first_name="–î–µ–º–æ",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            )
            self.stdout.write(
                self.style.SUCCESS(f"Created demo user: {demo_user.username}")
            )

        # Create site settings
        settings, created = SiteSettings.objects.get_or_create(
            pk=1,
            defaults={
                "site_title": "ObsidianTime",
                "site_description": "–ú–µ—Å—Ç–æ –¥–ª—è –º–µ–º–æ–≤, –æ–±—â–µ–Ω–∏—è –∏ –≤–µ—Å–µ–ª—å—è!",
                "show_rickroll": True,
                # rickroll_video will be empty by default -
                # admin can upload file manually
            },
        )
        if created:
            self.stdout.write(self.style.SUCCESS("Created site settings"))
            self.stdout.write(
                self.style.WARNING(
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è —Ä–∏–∫—Ä–æ–ª–ª–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: /admin/"
                )
            )

        # Create social links
        social_links_data = [
            {
                "platform": "twitch",
                "title": "ObsidianTime –Ω–∞ Twitch",
                "url": "https://twitch.tv/obsidiantime",
                "description": "–°—Ç—Ä–∏–º—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "order": 1,
            },
            {
                "platform": "youtube",
                "title": "ObsidianTime –Ω–∞ YouTube",
                "url": "https://youtube.com/@obsidiantime",
                "description": "–í–∏–¥–µ–æ –∏ –æ–±–∑–æ—Ä—ã",
                "order": 2,
            },
            {
                "platform": "telegram",
                "title": "ObsidianTime –≤ Telegram",
                "url": "https://t.me/obsitgroup",
                "description": "–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
                "order": 3,
            },
        ]

        for link_data in social_links_data:
            link, created = SocialLink.objects.get_or_create(
                platform=link_data["platform"], defaults=link_data
            )
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f"Created social link: {link.title}")
                )

        # Create initial quotes
        quotes_data = [
            {
                "text": (
                    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–æ–±–æ–π, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã."
                ),
                "author": "–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
            },
            {
                "text": ("–ë—É–¥—å—Ç–µ —Å–æ–±–æ–π; –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã."),
                "author": "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            },
            {
                "text": (
                    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî "
                    "–ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å."
                ),
                "author": "–°—Ç–∏–≤ –î–∂–æ–±—Å",
            },
            {
                "text": "–û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è.",
                "author": "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            },
            {
                "text": (
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –Ω–∞—É–∫–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ."
                ),
                "author": "–î–æ–Ω–∞–ª—å–¥ –ö–Ω—É—Ç",
            },
        ]

        admin_user = User.objects.get(username="admin")
        for quote_data in quotes_data:
            quote, created = Quote.objects.get_or_create(
                text=quote_data["text"],
                defaults={"author": quote_data["author"], "added_by": admin_user},
            )
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f"Created quote: {quote.text[:50]}...")
                )

        # Create welcome message
        welcome_message, created = Message.objects.get_or_create(
            content=(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ObsidianTime! "
                "üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è, –¥–µ–ª–∏—Ç—å—Å—è –º–µ–º–∞–º–∏ "
                "–∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è!"
            ),
            defaults={"author": admin_user, "message_type": "text"},
        )
        if created:
            self.stdout.write(self.style.SUCCESS("Created welcome message"))

        self.stdout.write(self.style.SUCCESS("Successfully set up initial data!"))
        self.stdout.write(self.style.WARNING("Admin credentials: admin / admin123"))
        self.stdout.write(self.style.WARNING("Demo user credentials: demo / demo123"))
